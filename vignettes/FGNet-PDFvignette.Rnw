% -*- mode: noweb; noweb-default-code-mode: R-mode; -*-
%\VignetteIndexEntry{FGNet-PDFvignette}
%\VignetteKeywords{Visualization, Annotation, GO, Pathways, GeneSetEnrichment, Networks, NetworkVisualization}
%\VignetteDepends{FGNet}
%\VignettePackage{FGNet}
\documentclass[a4paper,12pt]{article}

\usepackage{amsmath}
\usepackage{hyperref}
\usepackage{authblk}
\usepackage{anysize}
\usepackage{float}
\usepackage[font=small, labelfont=bf, labelsep=period]{caption}
\usepackage{subfigure} %or subcaption
\setlength{\captionmargin}{30pt}

\marginsize{1in}{1in}{0.5in}{0.5in}
\setlength{\parindent}{0pt}

\pagestyle{myheadings}
\markright{FGNet\hfill}

\title{\textit{FGNet}\\ Functional Gene Networks \\ derived from biological enrichment analyses}
\author{Sara Aibar}
\author{Celia Fontanillo}
\author{Conrad Droste}
\author{Javier De Las Rivas}
\affil{Bioinformatics and Functional Genomics Group\\ Centro de Investigacion del Cancer (CiC-IBMCC, CSIC/USAL)\\ Salamanca - Spain}

\begin{document}


<<include=FALSE, echo=FALSE>>=
library(knitr)
opts_chunk$set(concordance=TRUE)
@

\maketitle 
\begin{center}
Version: 3.0
\end{center}
\tableofcontents

\newpage
\section{Introduction to \textit{FGNet}}
\label{sec:intro}

FGNet allows perform a Functional Enrichment Analysis (FEA) on a list of genes or expression set, and transform the results into networks. The resulting functional networks provide an overview of the biological functions of the genes/terms, and allows to easily see links between genes, overlap between clusters, finding key genes... etc. \\
%The package allows to perform the functional enrichment analysis (FEA) and clustering through several tools: \emph{DAVID}, \emph{GeneTerm Linker}, topGO and gage (GSA), and provides functions to easily import FEA results from other tools.\\

\textbf{Biological functional analysis}

After obtaining a list of genes or proteins from an experiment or omic studies (microarrays, RNAseq, mass spectrometry, etc), next step is usually to perform a functional analysis of the genes to search for the biological functions or processes in which they are involved. In order to facilitate the analysis of large lists of genes, multiple functional enrichment tools have been developed. These tools search for the genes in biological databases (i.e. GO, Kegg, Interpro), and test whether any biological annotations are over-represented in the query gene list compared to what would be expected in the whole population. However, the raw output from a functional enrichment analysis often provides dozens or hundreds of terms, and it still requires a lot of time and attention to go through the whole list of genes and annotations. A way to simplify this task is grouping genes and terms which often appear together and create associated networks: Functional Networks. \\

FGNet builds the functional networks, based on a previous functional analysis. The package provides the functions to perform the FEA through these specific tools:

\begin{enumerate}
\item Functional Annotation Clustering from \textbf{DAVID}, which measures relationships among annotation terms based on their co-association with genes within the query gene list \cite{Huang1, Huang2}. This type of clustering mostly results in groups of highly related terms, such as synonymous annotations from different annotation spaces (i.e. Glycolysis in KEGG and GO-BP), which also share most of their genes.     
\item \textbf{GeneTerm Linker}, a post-enrichment tool, which focuses on clearing and sorting the results from a previous enrichment analysis. This is achieved by filtering little informative terms (i.e. \emph{cellular process}) and redundant annotations (i.e. \emph{metabolic process} and \emph{primary metabolic process}). The remaining gene-term sets are grouped into \emph{metagroups} based on their shared genes and terms (\emph{reciprocal linkage}) \cite{Fontanillo}.
\item \textbf{Gage} \cite{gage}, a Gene Set Analysis (GSA) tool, that can cluster the resulting enriched gene-term sets.
\item \textbf{TopGO} \cite{topGO}, a modular enrichment analysis method for the Gene Ontology (GO) that can be applied offline.
\end{enumerate}

To build the network based on other \textbf{other tools}, the raw output should be saved into a text file which contains the enriched terms and their genes. (For more details see function \emph{format\_results()}).

\newpage
\textbf{Functional network}

The \textbf{functional network} is the representation of the results from a functional enrichment analysis.\\ %The functional network can be gene-based or term-based, which determines whether the nodes of the network are nodes or terms.

In the \textbf{default} network, all the nodes of the network are of the same type, i.e. genes OR terms, which are linked to each other if they are in the same gene-term set. In the plot, the genes/terms in the same  groups (metagroups or clusters) are surrounded by a common background color. \\

In the \textbf{bipartite} network, the nodes are of two types, allowing to link the genes or terms, with the clusters they belong to. This network, can be built as an \emph{intersection network}, a simplified functional network where all the genes/terms that belong to only one metagroup are clustered into a single node. This simplified network contains only the nodes in several groups. \\% (intersection between groups) linked to the metagroups they belong to. 

In addition to the networks, FGNet also provides a few functions for further analysis. These functions allow to get a \textbf{distance matrix}, which represents the similarity between the groups based on the genes they share with each other (binary distance), and the distribution of \textbf{degree and betweenness} within the network and subnetworks, in order to find the most important genes (hubs).\\

All these functionalities can be accessed directly through the appopiate functions or the graphical user interface (GUI). In addition, FGNet also allows to generate an  \textbf{HTML report} with an overview of these plots and analyses for a specific gene list.\\

\begin{figure}[h]
\centering
\subfigure{
    \includegraphics[width=.3\textwidth]{nwExample1}
    \label{fig:subfig1a}
}
\centering
\subfigure{
    \includegraphics[width=.3\textwidth]{nwExample2}
    \label{fig:subfig1b}
}
\centering
\subfigure{
    \includegraphics[width=.3\textwidth]{nwExample3}
    \label{fig:subfig1c}
}

Examples of funtional network for different analyses.
\end{figure} 

\section{Installation}
\label{sec:installation}
To install \textit{FGNet} from \textit{Bioconductor}, type in your R console:
<<eval=FALSE>>=
source("http://bioconductor.org/biocLite.R")
biocLite("FGNet")
@ 

%Note on libraries and dependencies: FGNet requires libraries \emph{igraph} (version 0.6 or older), \emph{hwriter}, \emph{RCurl}, \emph{XML} and \emph{R.utils}.

%In addition, it may also use \emph{RColorBrewer} and \emph{png}. These libraries are not required for creating the Functional Networks, but they will enhance the network plots.

\newpage
\section{Creating a network from a list of genes/proteins}
\label{sec:BasicExample}
To generate a functional network with FGNet:
\begin{enumerate}
\item Perform a Functional Enrichment Analisis (FEA) on a list of genes or expression set.
\begin{table}[h]
\centering
\begin{tabular}{|l|l|l|l|} 
\hline
\textit{FEA tool} & \textit{Online? *} & \textit{Input} & \textit{Annotations} \\ \hline
\textbf{DAVID} & Yes & Gene list & Many \\ \hline
\textbf{Gene-Term Linker} & Yes & Gene list & GO, KEGG, Interpro \\ \hline
\textbf{TopGO} & No & Gene list & GO \\ \hline
\textbf{Gage (GSA)} & No & Expression set &  \begin{tabular}[c]{@{}l@{}}Gene sets\\ (Generated by FGNet:\\ GO, Kegg, Reactome)\end{tabular} \\ \hline
\end{tabular}
\caption{Summary of the available FEA tools}
\label{ToolsTable}
\emph{* Online tools require internet connection}
\end{table}
\item Create an HTML report with multiple views of the networks and analyses (sec. \ref{sec:report})
\item Personalize or analyze a specific network (sec.\ref{sec:onlyNetwork})
\end{enumerate}

These steps are integrated into the Graphical User Interface (GUI), which provides access to the main functionalities of FGNet.

\subsection{Graphical User Interface (GUI)}
\label{sec:GUI}
The Graphical User Interface (GUI) provides access to most FGNet functionalities. To launch the GUI, type in the R console:

<<eval=TRUE, echo=FALSE>>=
library(FGNet)
@
<<eval=FALSE>>=
library(FGNet)
FGNet_GUI()
@

\begin{figure}[h]
\centering
\includegraphics[width=.7\textwidth]{FGNet_GUI}
\label{fig:GUI}
\end{figure} 

In case you already have a gene list or gene expression from a previous analysis, it is possible to load it directly into the GUI genes field by passing it as argument:
<<eval=FALSE>>=
geneExpr <- c("YBL084C", "YDL008W", "YDR118W", "YDR301W", "YDR448W", 
    "YFR036W", "YGL240W", "YHR166C", "YKL022C", "YLR102C", "YLR115W", 
    "YLR127C", "YNL172W", "YOL149W", "YOR249C")
geneExpr <- setNames(c(rep(1,10),rep(-1,5)), geneExpr)

FGNet_GUI(geneExpr)
@

\subsection{In R code...}
The first step in the workflow is always is to perform a Functional Enrichment Analisis (FEA) on a list of genes or expression set. 

Once the FEA is ready, you can proceed to generate the HTML report or the individual network/analyses:
\begin{figure}[h]
\centering
\includegraphics[width=.7\textwidth]{FGNet_workflow}
\label{fig:workflow}
\end{figure} 

For help or more details on any functions or their arguments, just set a ? before its name.
<<eval=FALSE>>=
?FGNet_report
@

\subsubsection{Functional Enrichment Analysis (FEA)}
\label{sec:fea}

\begin{table}[h]
\centering
\begin{tabular}{|l|l|l|}
\hline
\textit{FEA tool} & \textit{Function} & \textit{\begin{tabular}[c]{@{}l@{}}Output\\ group type\end{tabular}} \\ \hline
\textbf{DAVID} & fea\_david() & Clusters \\ \hline
\textbf{TopGO} & fea\_topGO() & Gene-term sets \\ \hline
\textbf{Gene-Term Linker} & \begin{tabular}[c]{@{}l@{}}fea\_gtLinker() \& \\ fea\_gtLinker\_getResults()\end{tabular} & Metagroups \\ \hline
\textbf{Gage} & fea\_gage() & Clusters \\ \hline
Other & format\_feaResults() &  \\ \hline
\end{tabular}
\caption{FEA functions}
\label{FEAfunctions}
\end{table}

A simple example to do the FEA with each of the tools:

\textbf{DAVID}

Using DAVID requires internet connection. In addition, we recommend to register at \url{http://david.abcc.ncifcrf.gov/webservice/register.htm} to perform the queries through its Web Service.

<<eval=TRUE>>=
library(FGNet)
genesMetabolism <- c("YGR175C", "YHR007C", "YMR202W", "YJL167W", 
"YNL280C", "YGR060W", "YGL001C", "YLR100W", "YLR056W", "YGL012W", 
"YMR015C", "YML008C", "YHR072W", "YHR190W", "YKL004W", "YBR036C", 
"YDR294C", "YDR072C", "YKL008C", "YHL003C", "YMR296C", "YDR062W", 
"YJL134W", "YOR171C", "YLR260W", "YMR298W", "YMR272C", "YPL057C",
"YDR297W", "YBR265W", "YPL087W", "YBR183W", "YKR053C")
# To add the gene label/symbol to the plots...
library(org.Sc.sgd.db)
geneLabels <- unlist(as.list(org.Sc.sgdGENENAME)[genesMetabolism])
# To add gene expression color to the plots...
gMetabolismExpr <- setNames(rnorm(33,mean=0,sd=3), geneLabels)
@

<<eval=FALSE>>=
results_David <- fea_david(genesMetabolism, geneLabels=geneLabels, 
    email="example@email.com")
@ 

\textbf{TopGO}

TopGO does not require internet connection since it relies on local databases. However, the results from topGO are provided as individual gene-term sets, not grouped into clusters.\\

An example with the previous gene list:
<<eval=FALSE>>=
results_topGO <- fea_topGO(genesMetabolism, geneIdType="ENSEMBL", 
    geneLabels=geneLabels, organism="Sc") 
@


\textbf{Gene-Term Linker}

Since the analysis with Gene-Term Linker usually takes several minutes to be ready, the workflow is divided in two steps: (1) sending the analysis request, and (2) retrieving the results:
<<eval=TRUE>>=
genesYeast <- c("ADA2", "APC1", "APC11", "APC2", "APC4", "APC5", "APC9", "CDC16", 
    "CDC23", "CDC26", "CDC27", "CFT1", "CFT2", "DCP1", "DOC1", "FIP1", 
    "GCN5", "GLC7", "HFI1", "KEM1", "LSM1", "LSM2", "LSM3", "LSM4", 
    "LSM5", "LSM6", "LSM7", "LSM8", "MPE1", "NGG1", "PAP1", "PAT1", 
    "PFS2", "PTA1", "PTI1", "REF2", "RNA14", "RPN1", "RPN10", "RPN11", 
    "RPN13", "RPN2", "RPN3", "RPN5", "RPN6", "RPN8", "RPT1", "RPT3", 
    "RPT6", "SGF11", "SGF29", "SGF73", "SPT20", "SPT3", "SPT7", "SPT8", 
    "TRA1", "YSH1", "YTH1")
# Optional: Gene expression (1=UP, -1=DW)
genesYeastExpr <- setNames(c(rep(1,29), rep(-1,30)),genesYeast) 
@
<<eval=FALSE>>=
jobID <- fea_gtLinker(geneList=genesYeast,organism="Sc")
@

\emph{once the analysis is ready...}
<<eval=TRUE>>=
jobID <- 3907019
results_gtLinker <- fea_gtLinker_getResults(jobID=jobID, organism="Sc")
@

\textbf{Gage}

As a GSA approach, instead of performing the functional enrichment over a gene list, gage requires a raw expression set and the samples to compare:
<<eval=FALSE>>=
library(gage); data(gse16873)
results_gage <- fea_gage(eset=gse16873, 
    refSamples=grep('HN',colnames(gse16873), ignore.case =T), 
    compSamples=grep('DCIS',colnames(gse16873), ignore.case=T), 
    geneIdType="ENTREZID", organism="Hs", annotations="REACTOME")
FGNet_report(results_gage)
@

\newpage
\textbf{Other tools} 

To import the results from a functional enrichment analysis performed with other tools, see:
<<eval=FALSE>>=
?format_results()
@

\textbf{Web analysis} 

FGNet can also be applied to an analysis performed at DAVID and GeneTerm Linker web site:
\begin{itemize}
    \item DAVID: \url{http://david.abcc.ncifcrf.gov} (Functional Annotation Clustering Tool)
    \item GeneTerm Linker: \url{http://gtlinker.cnb.csic.es}
\end{itemize}

To import these results into FGNet, use DAVID's \emph{download file} or GeneTerm linker's \emph{job ID}, and the functions \emph{format\_david()} or \emph{fea\_gtLinker\_getResults()}:
\begin{figure}[h]
\centering
\subfigure{
    \includegraphics[width=.31\textwidth]{ssDavid}
	 \label{fig:subfig2b}
	 \centering
}
\centering
\subfigure{
    \includegraphics[width=.31\textwidth]{ssGtlinker}
	 \label{fig:subfig2a}
}
\end{figure}

<<eval=FALSE>>=
results <- format_david("http://david.abcc.ncifcrf.gov/data/download/90128.txt")
results <- fea_gtLinker_getResults(jobID=3907019)
@

\subsubsection{HTML report}
\label{sec:report}
The HTML report function allows to create a comprehensive report including diferent views of the Functional Network, the cluster/metagroup legend, and some further statistics directly directly from a gene list. 

Here is the usage of \emph{FGNet\_report()} for each of the previous examples:
<<eval=FALSE>>=
FGNet_report(results_topGO, geneExpr=gMetabolismExpr)  
FGNet_report(results_David, geneExpr=gMetabolismExpr) 
FGNet_report(results_gtLinker, geneExpr=genesYeastExpr)
FGNet_report(results_gage)
@

By default, the clusters included in these reports are filtered out to get cleaner results. The default values depend on the tool, and can be modified through FGNet\_report arguments:
<<eval=FALSE>>=
data(FEA_tools)
FEA_tools
@
<<eval=FALSE>>=
FGNet_report(results_gtLinker, filterThreshold=0.3)
@
<<eval=FALSE>>=
?FGNet_report
@

\subsubsection{Individual networks}
\label{sec:onlyNetwork}
To geneate specific networks rather than the full report, after the FEA is ready, use \emph{fea2incidMat()} to generate the incidence matrices that represent the networks:
<<eval=TRUE>>=
results <- results_gtLinker
incidMat <- fea2incidMat(results)
incidMat_terms <- fea2incidMat(results, key="Terms")
@

These incidence matrices can be plotted and anlyzed in diferent ways:
<<fig=TRUE, eval=TRUE>>=
functionalNetwork(incidMat, geneExpr=genesYeastExpr,
    plotTitleSub="Default gene view")
@
<<eval=TRUE>>=
getTerms(results)[1]
@

\newpage
<<eval=FALSE>>=
functionalNetwork(incidMat_terms, plotOutput="dynamic", vLabelCex=0.4)
@

<<eval=TRUE, fig=TRUE, echo=FALSE, width=10>>=
functionalNetwork(incidMat_terms, plotTitleSub="Terms network", legendText=FALSE)
@

<<eval=TRUE, fig=TRUE>>=
functionalNetwork(incidMat_terms, plotType="bipartite",
    plotTitleSub="Terms in several metagroups")
@

\section{Advanced example: editing and creating new networks}

In this section we will use the functional analysis of an Alzheimer dataset (GSE4757):
<<eval=TRUE>>=
jobID <- 1639610
feaAlzheimer <- fea_gtLinker_getResults(jobID=jobID, organism="Hs")
@

The variable \emph{feaAlzheimer} contains the raw results from the functional analysis. The slot "metagroups" could also be "clusters" or missing depending on the FEA tool:
<<eval=TRUE>>=
names(feaAlzheimer)
@

<<eval=TRUE, results=hide>>=
head(feaAlzheimer$metagroups)
@

To see the terms in each cluster/metagroup use \emph{getTerms()}:
<<eval=TRUE>>=
getTerms(feaAlzheimer)[3:4]
@

\newpage
\subsection{Incidence matrices}
\label{sec:fea2incidMat}
The FEA results should be transformed into incidence matrices to create the netwok. These matrices are the internal representation of the network: they contain which genes are in each metagroup or cluster and in each gene-term set. Therefore, it is in this step where the main shape of the network is determined. 

The function to create the incidence matrices is \emph{fea2incidMat()}. It allows to filter out clusters, decide wether the networks should be gene-based or term-based, stablish the groups to link the genes/terms, etc...

We will start the example creating a simple gene-based network:
<<eval=TRUE>>=
incidMat <- fea2incidMat(feaAlzheimer)
@
<<eval=TRUE>>= 
head(incidMat$metagroupsMatrix)
incidMat$gtSetsMatrix[1:5, 14:18]
@

To filter or select with metagroups to show, use the arguments \emph{filterAttribute}, \emph{filterOperator} and \emph{filterThreshold}. "filterAttribute" should be a column from the feaAlzheimer\$clusters or metagroups data frame. The recommended filters for each tool can be seen in the object \emph{FEA\_tools}, which contains the default filters when generating the HTML report:
<<eval=FALSE>>=
data(FEA_tools)
FEA_tools
@
<<eval=TRUE>>= 
incidMatFiltered <- fea2incidMat(feaAlzheimer, 
    filterAttribute="Silhouette Width", filterOperator="<", filterThreshold=0.2)
@

To see which metagroups/clusters have been filtered out and will not be shown in the networks:
<<eval=FALSE>>=
incidMatFiltered$filteredOut
@

For more on selecting and filtering groups see section Section \ref{sec:filtering}.
To build the networks based on terms, use the argument \emph{key="Terms"} (Section \ref{sec:TermsNw}).

\subsection{Functional network}
The function \emph{functionalNetwork()} generates and plots the networks.
In case there is available expression data, it can be used for representation in this step:
<<eval=TRUE>>=
# (Fake expression data)
geneList <- rownames(incidMat$metagroupsMatrix)
geneExpr <- setNames(c(rep(1,40), rep(-1,37)), geneList)
@

The default plot will plot all the genes/terms in the network, and will return the netwoks as igraph objects and matrices in an invisible list. The argument keepColors determine wether the colors should be consistent, taking into account the filtered groups, or restarted:
<<fig=TRUE, eval=TRUE>>=
fNw <- functionalNetwork(incidMatFiltered, geneExpr=geneExpr, 
    keepColors=FALSE)
@

By setting the parameter \emph{PlotType="dynamic"} instead of an static plot, it will create an interactive one. By setting  \emph{PlotType="dynamic"}, it is possible to produce only the network without plotting.
<<eval=FALSE>>=
functionalNetwork(incidMatFiltered, geneExpr=geneExpr, plotOutput="dynamic") 
fNw <- functionalNetwork(incidMatFiltered, plotOutput="none") 
@

Since the returned networks are \emph{iGraph} objects, they can be used or analyzed as such:
<<eval=TRUE>>=
names(fNw)
names(fNw$iGraph)
library(igraph)
clNw <- fNw$iGraph$commonClusters
clNw
@
<<eval=FALSE>>=
vcount(clNw)
ecount(clNw)
sort(betweenness(clNw), decreasing=TRUE)[1:10]
igraph.to.graphNEL(clNw)
@

In dynamic plots (tkplot) it is not possible to draw the metagroup background. However, you can save the layout of a dynamic network, and plot it as static using the argument \texttt{vLayout}:
<<eval=FALSE>>=
functionalNetwork(incidMatFiltered, plotOutput="dynamic") 
# Modify the layout...
saveLayout <- tkplot.getcoords(1)   # tkp.id (ID of the tkplot window)
functionalNetwork(incidMatFiltered, vLayout=saveLayout)
@

\newpage
\subsection{Bipartite and intersection network}
The default \emph{bipartite} version of the functional network plots the \emph{intersection network}: a simplified functional network, containing only the nodes in several metagroups and the metagroups they belong to. In this network, metagroup nodes (the coloured noces) can be seen as a cluster of all the genes/proteins that belong only to that metagroup:
<<fig=TRUE, eval=TRUE>>=
mgKeyTerm <- keywordsTerm(getTerms(feaAlzheimer), 
    nChar=100)[-c(as.numeric(incidMatFiltered$filteredOut))]
functionalNetwork(incidMatFiltered, plotType="bipartite", legendText=mgKeyTerm)
@

To plot a full bipartite network including all the nodes, just set \emph{keepAllNodes=TRUE}:
<<fig=TRUE, eval=TRUE, width=10>>=
functionalNetwork(incidMatFiltered, geneExpr=geneExpr, plotType="bipartite",
    keepAllNodes=TRUE, plotTitleSub="Bipartite network will all nodes")
@

\subsection{Terms networks}
\label{sec:TermsNw}
In the same way we have built networks to explore the relationship between genes, the same approach can be used to explore the relationship between the biological terms in the enrichment analysis. i.e. to see which biological terms are usually associated, or locate which terms are in several groups. 
To do so, build the incidence matrices based on terms instead of genes using the argument \emph{key="Terms"}.
<<eval=TRUE>>=
incidMatTerms <- fea2incidMat(feaAlzheimer, key="Terms")
@ 
<<eval=TRUE, echo=TRUE, fig=TRUE, width=10>>=
functionalNetwork(incidMatTerms, plotType="bipartite", 
    plotTitle="Terms in several metagroups")
@

By default, the functional network is built establishing links between nodes (genes or terms) in the same gene-term sets. Depending on the tool, this network might have few or no edges:
<<eval=FALSE>>=
functionalNetwork(incidMatTerms,  weighted=TRUE, plotOutput="dynamic")
@ 

To plot a network with links between all the terms in the same cluster or metagroups, use fea2incidMat. For example, providing the \$cluster or \$metagroup slots in order to consider the whole cluster/metagroup as a gene-term set:
<<eval=TRUE, echo=TRUE, fig=FALSE>>=
incidMatTerms <- fea2incidMat(feaAlzheimer$metagroups, clusterColumn="Metagroup", 
    key="Terms",
    filterAttribute="Silhouette.Width", filterThreshold=0.2)
functionalNetwork(incidMatTerms, legendText=FALSE, plotOutput="dynamic")
@
<<eval=TRUE, echo=FALSE, fig=TRUE>>=
functionalNetwork(incidMatTerms, legendText=FALSE)
@


Since GeneTerm Linker filters out generic and redundant terms from the final metagroups, by default these terms are not plotted. To include them in the graph, set the argument \emph{removeFiltered=FALSE} (only available for GeneTerm Linker).
<<eval=TRUE, fig=TRUE, height=5, width=10>>=
incidMatTerms <- fea2incidMat(feaAlzheimer, key="Terms", removeFilteredGtl=FALSE)
par(mfrow=c(1,2))
functionalNetwork(incidMatTerms, vLabelCex=0.2,
    plotTitle="Including filtered terms", legendText=FALSE)
functionalNetwork(incidMatTerms, plotType="bipartite", vLabelCex=0.4,
    plotTitle="Including filtered terms")
@

For more information on the filtered terms see \cite{Fontanillo} or \url{http://gtlinker.cnb.csic.es/gtset/help}.

\subsection{Genes - Terms networks}

To build a genes-terms network, we can use the bipartite plot with the appropiate formating of the input matrices.\\

For many FEA tools it will be enough with appliying the \emph{fea2incidMat()} directly to the \$geneTermSets matrix selecting the gene-term sets we want to plot.
i.e. gene-term sets in a specific cluster, filter generic terms (terms annotated to more than X genes), etc...\\

Note that this approach might not be appropiate for GeneTerm Linker, since it groups several terms into each gene-term set.

<<eval=TRUE, echo=FALSE>>=
txtFile <- paste(file.path(system.file('examples', package='FGNet')), "David_Metabolism.txt", sep=.Platform$file.sep)
feaMetabolism <- format_david(txtFile, jobName="David_Metabolism",geneLabels=geneLabels)
@

<<eval=FALSE>>=
feaMetabolism <- fea_david(genesMetabolism, email="...", geneLabels=geneLabels)
@
<<eval=TRUE>>=
gtSets <- feaMetabolism$geneTermSets
gtSets <- gtSets[gtSets$Cluster %in% c(9),] 
gtSets <- gtSets[gtSets$Pop.Hits<500,]
@

Then, create a terms-genes incidence matrix with \emph{fea2incidMat()}, and plot the network...
<<eval=TRUE>>=
termsGenes <- t(fea2incidMat(gtSets, clusterColumn="Terms")$clustersMatrix)
library(R.utils)
rownames(termsGenes) <- sapply(strsplit(rownames(termsGenes), ":"), 
    function(x) capitalize(x[length(x)]))
termsGenes[1:5,1:5]
@

Network, with genes colored based on their expression and terms on alphabetical order:
<<fig=TRUE, width=10>>=
functionalNetwork(t(termsGenes), plotType="bipartite", keepAllNodes=TRUE,
    legendPrefix="", plotTitle="Genes - Terms network", plotTitleSub="",
    geneExpr=gMetabolismExpr, plotExpression="Fill")
@  


Color to genes by alphabetical order (from red to pink), terms white:
<<fig=TRUE>>=
functionalNetwork(termsGenes, plotType="bipartite", keepAllNodes=TRUE,
    legendPrefix="", plotTitle="Genes - Terms network", plotTitleSub="")
@



\section{Filtering and selecting clusters}
\label{sec:filtering}
In this section we will analyze with DAVID a list with genes from 2 metabolic pathways in yeast: \emph{ergosterol biosynthesis} and \emph{sphingolipid metabolism}, as an example of a network with very overlapping clusters.

<<eval=FALSE>>=
feaMetabolism <- fea_david(genesMetabolism, email="...", geneLabels=geneLabels)
incidMat <- fea2incidMat(feaMetabolism)
functionalNetwork(incidMat, legendText=FALSE) 
@  
<<fig=TRUE, eval=TRUE, echo=FALSE, width=10>>=
incidMat <- fea2incidMat(feaMetabolism)
functionalNetwork(incidMat) 
@

<<eval=TRUE>>=
incidMatTerms <- fea2incidMat(feaMetabolism, key="Terms")
@
<<eval=FALSE>>=
functionalNetwork(incidMatTerms$clustersMatrix, plotOutput="dynamic",
  weighted=TRUE, eColor="grey")
@
<<eval=TRUE, fig=TRUE>>=
functionalNetwork(incidMatTerms$clustersMatrix, plotType="bipartite", 
 plotTitle="Terms in several clusters")
@


\subsection{Filtering based on a \textbf{cluster propperty}}
The clusters to plot can be selected/filtered based on any propperty that is available in the clusters matrix:
<<eval=TRUE>>=
colnames(feaMetabolism$clusters)
@

i.e. Selecting the clusters with highest Enrichment Score or least genes (setting eColor=NA, plots the networks without edges):
<<fig=TRUE, eval=TRUE, height=5, width=10>>=
par(mfrow=c(1,2))

# Highest enrichment score
filterProp <- as.numeric(as.character(
    feaMetabolism$clusters$ClusterEnrichmentScore))
quantile(filterProp, c(0.10, 0.25, 0.5, 0.75, 0.9))
incidMatFiltered <- fea2incidMat(feaMetabolism, 
    filterAttribute="ClusterEnrichmentScore",
    filterOperator="<", filterThreshold=10)
functionalNetwork(incidMatFiltered, eColor=NA,
    plotTitle="Highest enrichment score")

# Lowest genes
quantile(as.numeric(as.character(feaMetabolism$clusters$nGenes)),
    c(0.10, 0.25, 0.5, 0.75, 0.9))
incidMatFiltered <- fea2incidMat(feaMetabolism, 
 filterAttribute="nGenes", filterOperator=">", filterThreshold=15)
functionalNetwork(incidMatFiltered, eColor=NA,
    plotTitle="Smaller clusters")
@
 
To use any propperty that is not available in the \$clusters data frame, just add it as column to the dataframe.
 
\subsection{Selecting \textbf{clusters with specific terms or keywords}}

<<eval=TRUE>>=
keywords <- c("sphingolipid") 
selectedClusters <- sapply(getTerms(feaMetabolism), 
    function(x) 
    any(grep(paste("(", paste(keywords, collapse="|") ,")",sep=""), tolower(x))))
@
<<eval=FALSE>>=
getTerms(feaMetabolism)[selectedClusters]
@
<<eval=TRUE>>=
tmpFea <- feaMetabolism
tmpFea$clusters <- cbind(tmpFea$clusters, keywords=selectedClusters)
incidMatSelection <- fea2incidMat(tmpFea, 
 filterAttribute="keywords", filterOperator="!=",filterThreshold="TRUE")
functionalNetwork(incidMatSelection, plotType="bipartite", plotOutput="dynamic")
@ 

\subsection{Selecting \textbf{specific groups}}

\emph{clustersDistance()} allows to explore the overlap between groups:
<<fig=TRUE,eval=TRUE, width=9>>=
distMat <- clustersDistance(incidMat)
@

Clusters 1, 7 and 9 seem to be very close (overlapping), let's see:
<<fig=TRUE, eval=TRUE, width=10>>=
selectedClusters <- rep(FALSE, nrow(feaMetabolism$clusters))
selectedClusters[c(1,7,9)] <- TRUE

tmpFea <- feaMetabolism
tmpFea$clusters <- cbind(tmpFea$clusters, select=selectedClusters)
incidMatSelection <- fea2incidMat(tmpFea, 
  filterAttribute="select", filterOperator="!=",filterThreshold="TRUE")
functionalNetwork(incidMatSelection, eColor=NA)
@

\newpage
\section{Further analyses}
\emph{fea2incidMat()} can be used to explore the structure of the network. It also returns statistics about the nodes betweeness within each cluster, etc...\\

The example with GeneTerm Linker (Alzheimer):
<<eval=TRUE, fig=TRUE, width=8>>=
incidMatFiltered <- fea2incidMat(feaAlzheimer, 
    filterAttribute="Silhouette Width", filterOperator="<", filterThreshold=0.2)
stats <- analyzeNetwork(incidMatFiltered)
@
<<eval=TRUE>>=
names(stats)
stats$transitivity
@
\$degree and \$betweeness are the values used for the plots. They contain the values for each of the nodes in the global network (commonClusters) and within each cluster/metagroup (subsets of commonGtSets network). The degree is given as percentage, normalized based on the total number of nodes of the network. i.e. a value of 90 in a network of 10 nodes, would mean the actual degree of the node is 9: it is conneded to 9 nodes (90\% of 10)).

The betweeness of each node in each cluster as matrix:
<<eval=TRUE>>=
head(stats$betweenessMatrix)
@

Inter-modular hubs: Nodes with betweeness within the top 75\% in the global network
<<eval=TRUE>>=
stats$hubsList$Global
@
Intra-modular hubs: Nodes with betweeness within the top 75\% in each cluster sub-network
<<eval=TRUE>>=
stats$hubsList$"9"
@ 

DAVID's example: 
<<eval=TRUE, fig=TRUE, width=8>>=
incidMat_metab <- fea2incidMat(feaMetabolism)
analyzeNetwork(incidMat_metab)
@
Notice the structure of the network varies not only depending on the dataset, but also on the tool. Since tools like DAVID link all the nodes/terms within each cluster, their internal normalized degree is always 100\%.

\newpage
\emph{plotGoAncestors()} and \emph{plotKegg()} also allow to explore the significant gene term sets:
<<eval=TRUE, fig=TRUE>>=
goIds <- getTerms(feaMetabolism, returnValue="GO")[[10]]
plotGoAncestors(goIds, ontology="MF")
@

<<eval=FALSE>>=
genesAlz <- rownames(fea2incidMat(feaAlzheimer)$metagroupsMatrix)
genesAlzExpr <- setNames(c(rep(1,50), rep(-1,27)),genesAlz) 

keggIds <- getTerms(feaAlzheimer, returnValue="KEGG")[[3]]
plotKegg("hsa05010", geneExpr=genesAlzExpr, geneIDtype="GENENAME")
# Saved as .png in current directory
@

\begin{figure}[h]
\centering
\label{fig:Kegg}
\includegraphics[width=.3\textwidth]{hsa05010_Alzheimer_disease}
\end{figure}



\newpage

\section*{Acknowledgements}
This work was supported by Instituto de Salud Carlos III and by a grant from the Junta de Castilla y Leon and the European Social Fund to S.A and C.D.

\begin{thebibliography}{6} 
\bibitem{Huang1} Huang DW, Sherman BT, Lempicki RA. \emph{Systematic and integrative analysis of large gene lists using DAVID Bioinformatics Resources.} Nature Protoc. 2009;4(1):44-57.

\bibitem{Huang2} Huang DW, Sherman BT, Lempicki RA. \emph{Bioinformatics enrichment tools: paths toward the comprehensive functional analysis of large gene lists.} Nucleic Acids Res. 2009;37(1):1-13.

\bibitem{Fontanillo} Fontanillo C, Nogales-Cadenas R, Pascual-Montano A, De Las Rivas J (2011) \emph{Functional Analysis beyond Enrichment: Non-Redundant Reciprocal Linkage of Genes and Biological Terms.} PLoS ONE 6(9): e24289. doi:10.1371/journal.pone.0024289 

\bibitem{topGO} Alexa A, and Rahnenfuhrer J (2010) topGO: Enrichment analysis for Gene Ontology. R package version 2.16.0. URL: \url{http://www.bioconductor.org/packages/release/bioc/html/topGO.html}

\bibitem{gage} Luo W, Friedman MS, Shedden K, Hankenson KD, Woolf PJ (2009) GAGE: generally applicable gene set enrichment for pathway analysis. BMC Bioinformatics. 10:161. URL: \url{http://www.bioconductor.org/packages/release/bioc/html/gage.html}

\end{thebibliography}
\end{document}
